struct mesh80211s_MeshStation
{
  string mac<>;
  string device<>;
  unsigned int inactive_time;
  unsigned int rx_bytes;
  unsigned int rx_packets;
  unsigned int tx_bytes;
  unsigned int tx_packets;
  int signal;
  unsigned int tx_bitrate;
  unsigned int llid;
  unsigned int plid;
  string plink<>;
%{
  mesh80211s_MeshStation() : mac(0), device(0), plink(0) {}
  mesh80211s_MeshStation(const mesh80211s_MeshStation& msg) :
    inactive_time(msg.inactive_time), 
    rx_bytes(msg.rx_bytes), rx_packets(msg.rx_packets),
    tx_bytes(msg.tx_bytes), tx_packets(msg.tx_packets),
    int signal(msg.signal),
    tx_bitrate(msg.tx_bitrate),
    llid(msg.llid), plid(msg.plid)
  {
    mac = new char[strlen(msg.mac) + 1];
    strcpy(mac, msg.mac);

    device = new char[strlen(msg.device) + 1];
    strcpy(device, msg.device);

    plink = new char[strlen(msg.plink) + 1];
    strcpy(plink, msg.plink);
  }
  ~mesh80211s_MeshStation()
  {
    if (mac != 0)
      delete[] mac;

    if (device != 0)
      delete[] device;

    if (plink != 0)
      delete[] plink;
  }
  mesh80211s_MeshStation& operator= (const mesh80211s_MeshStation& msg)
  {
    inactive_time = msg.inactive_time;
    rx_bytes = msg.rx_bytes;
    rx_packets = msg.rx_packets;
    tx_bytes = msg.tx_bytes;
    tx_packets = msg.tx_packets;
    signal = msg.signal;
    tx_bitrate = msg.tx_bitrate;
    llid = msg.llid;
    plid = msg.plid;

    if (mac != 0)
      delete[] mac;

    mac = new char[strlen(msg.mac) + 1];
    strcpy(mac, msg.mac);

    if (device != 0)
      delete[] device;

    device = new char[strlen(msg.device) + 1];
    strcpy(device, msg.device);

    if (plink != 0)
      delete[] plink;

    plink = new char[strlen(msg.plink) + 1];
    strcpy(plink, msg.plink);

    return *this;
  }
%}
};

%{
namespace ipc_bridge
{
    namespace mesh80211s
    {
        typedef mesh80211s_MeshStation MeshStation;
    }
}
%}

