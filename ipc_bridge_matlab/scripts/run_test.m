% Test each message type, requires central 

% Nothing else can talk to central with a message name 'msg'
% during the test

% Keep in alphabetical order
messages = {'acroname_moto_motor_debug', ...
            'asctec_DMCmd', ...
            'asctec_HWCmd', ...
            'asctec_Voltage', ...
            'geometry_msgs_Point', ...
            'geometry_msgs_PointStamped', ...
            'geometry_msgs_Pose', ...
            'geometry_msgs_PoseArray', ...
            'geometry_msgs_PoseStamped', ...
            'geometry_msgs_PoseWithCovariance', ...
            'geometry_msgs_PoseWithCovarianceStamped', ...
            'geometry_msgs_Quaternion', ...
            'geometry_msgs_Transform', ...
            'geometry_msgs_TransformStamped', ...
            'geometry_msgs_Twist', ...
            'geometry_msgs_TwistStamped', ...
            'geometry_msgs_TwistWithCovariance', ...
            'geometry_msgs_Vector3', ...
            'geometry_msgs_Wrench', ...
            'nav_msgs_GridCells', ...
            'nav_msgs_MapMetaData', ...
            'nav_msgs_OccupancyGrid', ...
            'nav_msgs_Odometry', ...
            'nav_msgs_Path', ...
            'roslib_Header', ...
            'sensor_msgs_Imu', ...
            'sensor_msgs_LaserScan', ...
            'tf_tfMessage'};

result = zeros(1, length(messages));
for i = 1:length(messages)
  result(1, i) = msg_test(messages{i});
end

passed = find(result == true);
failed = find(result == false);

disp('**************');
if ~isempty(passed)
  disp('Passed:');
  for i = 1:length(passed)
    disp(messages{i})
  end
end
if ~isempty(failed)
  disp('Failed');
  for i = 1:length(failed)
    disp(messages{i})
  end
end
